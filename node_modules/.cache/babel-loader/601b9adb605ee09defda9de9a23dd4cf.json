{"ast":null,"code":"var _jsxFileName = \"/Users/louispisani/personal/sloptoad.github.io/liquality/src/api/Request.js\";\nimport React from 'react';\nimport shortid from \"shortid\";\n\nclass Request extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomKey = () => {\n      return shortid.generate();\n    };\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      intervalID: null\n    };\n  }\n\n  componentDidMount() {\n    this.makeRequest5();\n  }\n\n  makeRequest5() {\n    let intervalID = setInterval(async () => {\n      fetch(\"https://liquality.io/swap/agent/api/swap/marketinfo\").then(res => res.json()).then(results => {\n        this.setState({\n          isLoaded: true,\n          items: results,\n          intervalID: intervalID\n        });\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n      console.log(this.props.seconds);\n    }, 5000);\n  }\n\n  makeRequest10() {\n    let intervalID = setInterval(async () => {\n      fetch(\"https://liquality.io/swap/agent/api/swap/marketinfo\").then(res => res.json()).then(results => {\n        this.setState({\n          isLoaded: true,\n          items: results,\n          intervalID: intervalID\n        });\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n      console.log(this.props.seconds);\n    }, 10000);\n  }\n\n  makeRequest15() {\n    let intervalID = setInterval(async () => {\n      fetch(\"https://liquality.io/swap/agent/api/swap/marketinfo\").then(res => res.json()).then(results => {\n        this.setState({\n          isLoaded: true,\n          items: results,\n          intervalID: intervalID\n        });\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n      console.log(this.props.seconds);\n    }, 15000);\n  }\n\n  componentDidUpdate() {\n    if (this.props.seconds == 5000) {\n      this.makeRequest5();\n    }\n\n    if (this.props.seconds == 10000) {\n      console.log(\"in 10\");\n      this.makeRequest10();\n    }\n\n    if (this.props.seconds == 15000) {\n      this.makeRequest5();\n    }\n\n    console.log(\"componentDidUpdate\");\n    clearInterval(this.state.intervalID);\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      result\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 18\n        }\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 18\n        }\n      }, \"Loading...\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }, this.state.items.map((items, index) => /*#__PURE__*/React.createElement(\"li\", {\n        key: this.getRandomKey(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }\n      }, this.state.items[index].from, \" - \", this.state.items[index].to, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"rate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 20\n        }\n      }, \" \", this.state.items[index].rate))));\n    }\n  }\n\n}\n\nexport default Request;","map":{"version":3,"sources":["/Users/louispisani/personal/sloptoad.github.io/liquality/src/api/Request.js"],"names":["React","shortid","Request","Component","constructor","props","getRandomKey","generate","state","error","isLoaded","items","intervalID","componentDidMount","makeRequest5","setInterval","fetch","then","res","json","results","setState","console","log","seconds","makeRequest10","makeRequest15","componentDidUpdate","clearInterval","render","result","message","map","index","from","to","rate"],"mappings":"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","sourcesContent":["import React from 'react';\nimport shortid from \"shortid\";\n\n\n\nclass Request extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          items: [],\n          intervalID: null\n\n        };\n      }\n\n      getRandomKey = () => {\n        return shortid.generate();\n    }\n      componentDidMount(){\n         this.makeRequest5(); \n      }\n    \n      makeRequest5() {\n        let intervalID  = setInterval(async () => {\n        fetch(\"https://liquality.io/swap/agent/api/swap/marketinfo\")\n          .then(res => res.json())\n          .then(\n            (results) => {\n              this.setState({\n                isLoaded: true,\n                items: results,\n                intervalID: intervalID\n                 });\n            },\n            \n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          )\n          console.log(this.props.seconds)\n        }, 5000)\n      }\n      makeRequest10() {\n        let intervalID  = setInterval(async () => {\n        fetch(\"https://liquality.io/swap/agent/api/swap/marketinfo\")\n          .then(res => res.json())\n          .then(\n            (results) => {\n              this.setState({\n                isLoaded: true,\n                items: results,\n                intervalID: intervalID\n                 });\n            },\n            \n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          )\n          console.log(this.props.seconds)\n        }, 10000)\n      }\n      makeRequest15() {\n        let intervalID  = setInterval(async () => {\n        fetch(\"https://liquality.io/swap/agent/api/swap/marketinfo\")\n          .then(res => res.json())\n          .then(\n            (results) => {\n              this.setState({\n                isLoaded: true,\n                items: results,\n                intervalID: intervalID\n                 });\n            },\n            \n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          )\n          console.log(this.props.seconds)\n        }, 15000)\n      }\n\n      componentDidUpdate(){\n        if(this.props.seconds==5000){\n            this.makeRequest5()\n        }\n        if(this.props.seconds ==10000){\n            console.log(\"in 10\")\n            this.makeRequest10()\n        }\n        if(this.props.seconds==15000){\n            this.makeRequest5()\n        }\n        console.log(\"componentDidUpdate\");\n        clearInterval(this.state.intervalID);\n\n      }\n \n    \n      render() {\n        const { error, isLoaded, result } = this.state;\n        if (error) {\n          return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n          return <div>Loading...</div>;\n        } else {\n          return (\n            <ul>\n              {this.state.items.map((items, index) => (\n                <li  key={this.getRandomKey()}>\n                    {this.state.items[index].from} - {this.state.items[index].to}\n                   <div className=\"rate\"> {this.state.items[index].rate}</div>\n\n                </li>\n              ))}\n            </ul>\n          );\n        }\n      }\n    }\n\n\nexport default Request;"]},"metadata":{},"sourceType":"module"}